!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD_K	intercode.h	16;"	d
AND	la.tab.c	/^     AND = 269,$/;"	e	enum:yytokentype	file:
AND	la.tab.h	/^     AND = 269,$/;"	e	enum:yytokentype
ARG_K	intercode.h	27;"	d
ASSIGNOP	la.tab.c	/^     ASSIGNOP = 267,$/;"	e	enum:yytokentype	file:
ASSIGNOP	la.tab.h	/^     ASSIGNOP = 267,$/;"	e	enum:yytokentype
ASSIGN_K	intercode.h	15;"	d
Args	la.y	/^Args	:	Exp COMMA Args		{$$=initNode("Args","");addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
Args	table.c	/^bool Args(Node* n,FieldList f,Operand arg_list)$/;"	f
BEGIN	lex.yy.c	125;"	d	file:
CALL_K	intercode.h	26;"	d
COMMA	la.tab.c	/^     COMMA = 263,$/;"	e	enum:yytokentype	file:
COMMA	la.tab.h	/^     COMMA = 263,$/;"	e	enum:yytokentype
CONSTANT	intercode.h	9;"	d
CompSt	la.y	/^CompSt	:	LC DefList StmtList RC		{$$=initNode("CompSt","");addChild($$,$4);addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
CompSt	table.c	/^void CompSt(Node * n,Type retype)$/;"	f
DEC_K	intercode.h	30;"	d
DIV	la.tab.c	/^     DIV = 273,$/;"	e	enum:yytokentype	file:
DIV	la.tab.h	/^     DIV = 273,$/;"	e	enum:yytokentype
DIV_K	intercode.h	19;"	d
DOT	la.tab.c	/^     DOT = 280,$/;"	e	enum:yytokentype	file:
DOT	la.tab.h	/^     DOT = 280,$/;"	e	enum:yytokentype
Dec	la.y	/^Dec	:	VarDec			{$$=initNode("Dec","");addChild($$,$1);}$/;"	l
Dec	table.c	/^FieldList Dec(Node *n,Type type,int from)	\/\/error type 5$/;"	f
DecList	la.y	/^DecList	:	Dec			{$$=initNode("DecList","");addChild($$,$1);}$/;"	l
DecList	table.c	/^FieldList DecList(Node *n,Type type,int from)$/;"	f
Def	la.y	/^Def	:	Specifier DecList SEMI	{$$=initNode("Def","");addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
Def	table.c	/^FieldList Def(Node *n,int from)$/;"	f
DefList	la.y	/^DefList	:	Def DefList		{$$=initNode("DefList","");addChild($$,$2);addChild($$,$1);}$/;"	l
DefList	table.c	/^FieldList DefList(Node* n,int from)$/;"	f
ECHO	lex.yy.c	630;"	d	file:
ELSE	la.tab.c	/^     ELSE = 282,$/;"	e	enum:yytokentype	file:
ELSE	la.tab.h	/^     ELSE = 282,$/;"	e	enum:yytokentype
EOB_ACT_CONTINUE_SCAN	lex.yy.c	168;"	d	file:
EOB_ACT_END_OF_FILE	lex.yy.c	169;"	d	file:
EOB_ACT_LAST_MATCH	lex.yy.c	170;"	d	file:
EXIT_SUCCESS	la.tab.c	273;"	d	file:
EXIT_SUCCESS	la.tab.c	301;"	d	file:
Exp	la.y	/^Exp 	:	Exp ASSIGNOP Exp	{$$=initNode("Exp","");addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
Exp	table.c	/^Type Exp(Node *n,Operand place)$/;"	f
Exp_Cond	table.c	/^Type Exp_Cond(Node *n,Operand label_true,Operand label_false)$/;"	f
ExtDecList	la.y	/^ExtDecList	:	VarDec			{$$=initNode("ExtDecList","");addChild($$,$1);}$/;"	l
ExtDecList	table.c	/^void ExtDecList(Node *n,Type type)$/;"	f
ExtDef	la.y	/^ExtDef	:	Specifier ExtDecList SEMI 	{$$=initNode("ExtDef","");addChild($$,$3);addChild($$,$2);addChild($$,$1);}	$/;"	l
ExtDef	table.c	/^void ExtDef(Node *n){	$/;"	f
ExtDefList	la.y	/^ExtDefList	:	ExtDef ExtDefList	{$$=initNode("ExtDefList","");addChild($$,$2);addChild($$,$1);}$/;"	l
ExtDefList	table.c	/^void ExtDefList(Node *n)$/;"	f
FLEXINT_H	lex.yy.c	29;"	d	file:
FLEX_BETA	lex.yy.c	13;"	d	file:
FLEX_SCANNER	lex.yy.c	8;"	d	file:
FLOAT	la.tab.c	/^     FLOAT = 259,$/;"	e	enum:yytokentype	file:
FLOAT	la.tab.h	/^     FLOAT = 259,$/;"	e	enum:yytokentype
FLOATTYPE	table.h	9;"	d
FSIZE	object.c	5;"	d	file:
FUNCTION	intercode.h	12;"	d
FUNCTION_K	intercode.h	28;"	d
FieldList	table.h	/^typedef struct FieldList_* FieldList;$/;"	t	typeref:struct:FieldList_
FieldList_	table.h	/^struct FieldList_$/;"	s
FunDec	la.y	/^FunDec	: 	ID LP VarList RP	 {$$=initNode("FunDec","");addChild($$,$4);addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
FunDec	table.c	/^Functype FunDec(Node* n,Type type)$/;"	f
Functype	table.h	/^typedef struct Functype_* Functype;$/;"	t	typeref:struct:Functype_
Functype_	table.h	/^struct Functype_$/;"	s
GOTO_K	intercode.h	22;"	d
ID	la.tab.c	/^     ID = 260,$/;"	e	enum:yytokentype	file:
ID	la.tab.h	/^     ID = 260,$/;"	e	enum:yytokentype
IF	la.tab.c	/^     IF = 266,$/;"	e	enum:yytokentype	file:
IF	la.tab.h	/^     IF = 266,$/;"	e	enum:yytokentype
IFGOTO_K	intercode.h	23;"	d
INITIAL	lex.yy.c	538;"	d	file:
INT	la.tab.c	/^     INT = 258,$/;"	e	enum:yytokentype	file:
INT	la.tab.h	/^     INT = 258,$/;"	e	enum:yytokentype
INT16_MAX	lex.yy.c	71;"	d	file:
INT16_MIN	lex.yy.c	62;"	d	file:
INT32_MAX	lex.yy.c	74;"	d	file:
INT32_MIN	lex.yy.c	65;"	d	file:
INT8_MAX	lex.yy.c	68;"	d	file:
INT8_MIN	lex.yy.c	59;"	d	file:
INTTYPE	table.h	8;"	d
InterCode	intercode.h	/^typedef struct InterCode_* InterCode;$/;"	t	typeref:struct:InterCode_
InterCode_	intercode.h	/^struct InterCode_$/;"	s
LABEL	intercode.h	11;"	d
LABEL_K	intercode.h	21;"	d
LB	la.tab.c	/^     LB = 279,$/;"	e	enum:yytokentype	file:
LB	la.tab.h	/^     LB = 279,$/;"	e	enum:yytokentype
LC	la.tab.c	/^     LC = 264,$/;"	e	enum:yytokentype	file:
LC	la.tab.h	/^     LC = 264,$/;"	e	enum:yytokentype
LOWER_THAN_ELSE	la.tab.c	/^     LOWER_THAN_ELSE = 281,$/;"	e	enum:yytokentype	file:
LOWER_THAN_ELSE	la.tab.h	/^     LOWER_THAN_ELSE = 281,$/;"	e	enum:yytokentype
LP	la.tab.c	/^     LP = 277,$/;"	e	enum:yytokentype	file:
LP	la.tab.h	/^     LP = 277,$/;"	e	enum:yytokentype
Label_No	intercode.h	/^typedef struct Label_No_* Label_No;$/;"	t	typeref:struct:Label_No_
Label_No_	intercode.h	/^struct Label_No_$/;"	s
MINUS	la.tab.c	/^     MINUS = 271,$/;"	e	enum:yytokentype	file:
MINUS	la.tab.h	/^     MINUS = 271,$/;"	e	enum:yytokentype
MUL_K	intercode.h	18;"	d
NOT	la.tab.c	/^     NOT = 275,$/;"	e	enum:yytokentype	file:
NOT	la.tab.h	/^     NOT = 275,$/;"	e	enum:yytokentype
Node	node.h	/^}Node;$/;"	t	typeref:struct:Node_t
Node_t	node.h	/^typedef struct Node_t{ $/;"	s
OR	la.tab.c	/^     OR = 268,$/;"	e	enum:yytokentype	file:
OR	la.tab.h	/^     OR = 268,$/;"	e	enum:yytokentype
Operand	intercode.h	/^typedef struct Operand_* Operand;$/;"	t	typeref:struct:Operand_
Operand_	intercode.h	/^struct Operand_$/;"	s
OptTag	la.y	/^OptTag	:	ID	{$$=initNode("OptTag","");addChild($$,$1);}$/;"	l
PARAM_K	intercode.h	29;"	d
PLUS	la.tab.c	/^     PLUS = 272,$/;"	e	enum:yytokentype	file:
PLUS	la.tab.h	/^     PLUS = 272,$/;"	e	enum:yytokentype
ParamDec	la.y	/^ParamDec	:	Specifier VarDec	{$$=initNode("ParamDec","");addChild($$,$2);addChild($$,$1);}$/;"	l
ParamDec	table.c	/^FieldList ParamDec(Node*n)$/;"	f
Program	la.y	/^Program	: 	ExtDefList	{$$=initNode("Program","");addChild($$,$1);root=$$;}$/;"	l
Program	table.c	/^void Program(Node *n)$/;"	f
RB	la.tab.c	/^     RB = 278,$/;"	e	enum:yytokentype	file:
RB	la.tab.h	/^     RB = 278,$/;"	e	enum:yytokentype
RC	la.tab.c	/^     RC = 265,$/;"	e	enum:yytokentype	file:
RC	la.tab.h	/^     RC = 265,$/;"	e	enum:yytokentype
READ_K	intercode.h	24;"	d
REGNUM	object.c	4;"	d	file:
REJECT	lex.yy.c	526;"	d	file:
RELOP	la.tab.c	/^     RELOP = 270,$/;"	e	enum:yytokentype	file:
RELOP	la.tab.h	/^     RELOP = 270,$/;"	e	enum:yytokentype
RETURN	la.tab.c	/^     RETURN = 284,$/;"	e	enum:yytokentype	file:
RETURN	la.tab.h	/^     RETURN = 284,$/;"	e	enum:yytokentype
RETURN_K	intercode.h	20;"	d
RIGHTAT_K	intercode.h	31;"	d
RP	la.tab.c	/^     RP = 276,$/;"	e	enum:yytokentype	file:
RP	la.tab.h	/^     RP = 276,$/;"	e	enum:yytokentype
SEMI	la.tab.c	/^     SEMI = 262,$/;"	e	enum:yytokentype	file:
SEMI	la.tab.h	/^     SEMI = 262,$/;"	e	enum:yytokentype
STAR	la.tab.c	/^     STAR = 274,$/;"	e	enum:yytokentype	file:
STAR	la.tab.h	/^     STAR = 274,$/;"	e	enum:yytokentype
STRUCT	la.tab.c	/^     STRUCT = 285$/;"	e	enum:yytokentype	file:
STRUCT	la.tab.h	/^     STRUCT = 285$/;"	e	enum:yytokentype
SUB_K	intercode.h	17;"	d
Specifier	la.y	/^Specifier	:	TYPE			{$$=initNode("Specifier","");addChild($$,$1);}$/;"	l
Specifier	table.c	/^Type Specifier(Node* n)$/;"	f
Stmt	la.y	/^Stmt	:	Exp SEMI		{$$=initNode("Stmt","");addChild($$,$2);addChild($$,$1);}$/;"	l
Stmt	table.c	/^void Stmt(Node *n,Type retype)		\/\/error type 8	return \/\/return type mismatched$/;"	f
StmtList	la.y	/^StmtList	:	Stmt StmtList		{$$=initNode("StmtList","");addChild($$,$2);addChild($$,$1);}$/;"	l
StmtList	table.c	/^void StmtList(Node *n,Type retype)$/;"	f
StructSpecifier	la.y	/^StructSpecifier	:	STRUCT OptTag LC DefList RC {$$=initNode("StructSpecifier","");addChild($$,$5);addChild($$,$4);addChild($$,$3);addChild($$,$2);addChild($$,$1);}	$/;"	l
StructSpecifier	table.c	/^Type StructSpecifier(Node *n)$/;"	f
Structure	table.h	/^typedef struct Structure_* Structure;$/;"	t	typeref:struct:Structure_
Structure_	table.h	/^struct Structure_$/;"	s
TABLESIZE	table.h	7;"	d
TADDRESS	intercode.h	13;"	d
TEMPVAR	intercode.h	7;"	d
TYPE	la.tab.c	/^     TYPE = 261,$/;"	e	enum:yytokentype	file:
TYPE	la.tab.h	/^     TYPE = 261,$/;"	e	enum:yytokentype
Tag	la.y	/^Tag	:	ID	{$$=initNode("Tag","");addChild($$,$1);}$/;"	l
Type	table.h	/^typedef struct Type_* Type;$/;"	t	typeref:struct:Type_
Type_	table.h	/^struct Type_$/;"	s
UINT16_MAX	lex.yy.c	80;"	d	file:
UINT32_MAX	lex.yy.c	83;"	d	file:
UINT8_MAX	lex.yy.c	77;"	d	file:
VADDRESS	intercode.h	10;"	d
VARIABLE	intercode.h	8;"	d
VarDec	la.y	/^VarDec	:	ID	{$$=initNode("VarDec","");addChild($$,$1);}$/;"	l
VarDec	table.c	/^FieldList VarDec(Node *n,Type type,int from)		\/\/error type 3$/;"	f
VarList	la.y	/^VarList	:	ParamDec COMMA VarList	{$$=initNode("VarList","");addChild($$,$3);addChild($$,$2);addChild($$,$1);}$/;"	l
VarList	table.c	/^FieldList VarList(Node *n)$/;"	f
Vector	case/E-1.c	/^struct Vector$/;"	s	file:
Vector	case/E-2.c	/^struct Vector$/;"	s	file:
WHILE	la.tab.c	/^     WHILE = 283,$/;"	e	enum:yytokentype	file:
WHILE	la.tab.h	/^     WHILE = 283,$/;"	e	enum:yytokentype
WRITE_K	intercode.h	25;"	d
YYABORT	la.tab.c	692;"	d	file:
YYACCEPT	la.tab.c	691;"	d	file:
YYBACKUP	la.tab.c	713;"	d	file:
YYBISON	la.tab.c	44;"	d	file:
YYBISON_VERSION	la.tab.c	47;"	d	file:
YYCASE_	la.tab.c	1145;"	d	file:
YYCASE_	la.tab.c	1155;"	d	file:
YYCOPY	la.tab.c	367;"	d	file:
YYCOPY	la.tab.c	370;"	d	file:
YYCOPY_NEEDED	la.tab.c	342;"	d	file:
YYDEBUG	la.tab.c	83;"	d	file:
YYDPRINTF	la.tab.c	783;"	d	file:
YYDPRINTF	la.tab.c	932;"	d	file:
YYEMPTY	la.tab.c	688;"	d	file:
YYEOF	la.tab.c	689;"	d	file:
YYERRCODE	la.tab.c	731;"	d	file:
YYERROR	la.tab.c	693;"	d	file:
YYERROR_VERBOSE	la.tab.c	88;"	d	file:
YYERROR_VERBOSE	la.tab.c	89;"	d	file:
YYERROR_VERBOSE	la.tab.c	91;"	d	file:
YYFAIL	la.tab.c	703;"	d	file:
YYFINAL	la.tab.c	383;"	d	file:
YYFPRINTF	la.tab.c	780;"	d	file:
YYFREE	la.tab.c	312;"	d	file:
YYID	la.tab.c	/^YYID (int yyi)$/;"	f	file:
YYID	la.tab.c	236;"	d	file:
YYINITDEPTH	la.tab.c	941;"	d	file:
YYLAST	la.tab.c	385;"	d	file:
YYLEX	la.tab.c	770;"	d	file:
YYLEX	la.tab.c	772;"	d	file:
YYLLOC_DEFAULT	la.tab.c	740;"	d	file:
YYLSP_NEEDED	la.tab.c	62;"	d	file:
YYMALLOC	la.tab.c	305;"	d	file:
YYMAXDEPTH	la.tab.c	952;"	d	file:
YYMAXUTOK	la.tab.c	398;"	d	file:
YYNNTS	la.tab.c	390;"	d	file:
YYNRULES	la.tab.c	392;"	d	file:
YYNSTATES	la.tab.c	394;"	d	file:
YYNTOKENS	la.tab.c	388;"	d	file:
YYPACT_NINF	la.tab.c	573;"	d	file:
YYPOPSTACK	la.tab.c	1316;"	d	file:
YYPULL	la.tab.c	59;"	d	file:
YYPURE	la.tab.c	53;"	d	file:
YYPUSH	la.tab.c	56;"	d	file:
YYRECOVERING	la.tab.c	711;"	d	file:
YYRHSLOC	la.tab.c	738;"	d	file:
YYSIZE_MAXIMUM	la.tab.c	213;"	d	file:
YYSIZE_T	la.tab.c	201;"	d	file:
YYSIZE_T	la.tab.c	203;"	d	file:
YYSIZE_T	la.tab.c	207;"	d	file:
YYSIZE_T	la.tab.c	209;"	d	file:
YYSKELETON_NAME	la.tab.c	50;"	d	file:
YYSTACK_ALLOC	la.tab.c	259;"	d	file:
YYSTACK_ALLOC	la.tab.c	263;"	d	file:
YYSTACK_ALLOC	la.tab.c	268;"	d	file:
YYSTACK_ALLOC	la.tab.c	291;"	d	file:
YYSTACK_ALLOC_MAXIMUM	la.tab.c	288;"	d	file:
YYSTACK_ALLOC_MAXIMUM	la.tab.c	294;"	d	file:
YYSTACK_BYTES	la.tab.c	338;"	d	file:
YYSTACK_FREE	la.tab.c	282;"	d	file:
YYSTACK_FREE	la.tab.c	292;"	d	file:
YYSTACK_GAP_MAXIMUM	la.tab.c	334;"	d	file:
YYSTACK_RELOCATE	la.tab.c	349;"	d	file:
YYSTATE	lex.yy.c	132;"	d	file:
YYSTYPE	la.tab.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	la.tab.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	la.tab.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	la.tab.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	la.tab.c	158;"	d	file:
YYSTYPE_IS_DECLARED	la.tab.h	92;"	d
YYSTYPE_IS_TRIVIAL	la.tab.c	156;"	d	file:
YYSTYPE_IS_TRIVIAL	la.tab.h	90;"	d
YYTABLES_NAME	lex.yy.c	2007;"	d	file:
YYTABLE_NINF	la.tab.c	602;"	d	file:
YYTERROR	la.tab.c	730;"	d	file:
YYTOKENTYPE	la.tab.c	102;"	d	file:
YYTOKENTYPE	la.tab.h	36;"	d
YYTOKEN_TABLE	la.tab.c	96;"	d	file:
YYTRANSLATE	la.tab.c	400;"	d	file:
YYUNDEFTOK	la.tab.c	397;"	d	file:
YYUSE	la.tab.c	229;"	d	file:
YYUSE	la.tab.c	231;"	d	file:
YY_	la.tab.c	219;"	d	file:
YY_	la.tab.c	223;"	d	file:
YY_AT_BOL	lex.yy.c	352;"	d	file:
YY_BREAK	lex.yy.c	709;"	d	file:
YY_BUFFER_EOF_PENDING	lex.yy.c	268;"	d	file:
YY_BUFFER_NEW	lex.yy.c	256;"	d	file:
YY_BUFFER_NORMAL	lex.yy.c	257;"	d	file:
YY_BUFFER_STATE	lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	lex.yy.c	149;"	d	file:
YY_BUF_SIZE	lex.yy.c	151;"	d	file:
YY_CHAR	lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	lex.yy.c	284;"	d	file:
YY_CURRENT_BUFFER_LVALUE	lex.yy.c	291;"	d	file:
YY_DECL	lex.yy.c	697;"	d	file:
YY_DECL_IS_OURS	lex.yy.c	693;"	d	file:
YY_DO_BEFORE_ACTION	lex.yy.c	377;"	d	file:
YY_END_OF_BUFFER	lex.yy.c	385;"	d	file:
YY_END_OF_BUFFER_CHAR	lex.yy.c	140;"	d	file:
YY_EXIT_FAILURE	lex.yy.c	1802;"	d	file:
YY_EXTRA_TYPE	lex.yy.c	549;"	d	file:
YY_FATAL_ERROR	lex.yy.c	684;"	d	file:
YY_FLEX_MAJOR_VERSION	lex.yy.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	lex.yy.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	lex.yy.c	11;"	d	file:
YY_FLUSH_BUFFER	lex.yy.c	320;"	d	file:
YY_INPUT	lex.yy.c	637;"	d	file:
YY_INT_ALIGNED	lex.yy.c	4;"	d	file:
YY_LESS_LINENO	lex.yy.c	179;"	d	file:
YY_LOCATION_PRINT	la.tab.c	763;"	d	file:
YY_MORE_ADJ	lex.yy.c	528;"	d	file:
YY_NEW_FILE	lex.yy.c	138;"	d	file:
YY_NULL	lex.yy.c	112;"	d	file:
YY_NUM_RULES	lex.yy.c	384;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	619;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	621;"	d	file:
YY_REDUCE_PRINT	la.tab.c	922;"	d	file:
YY_REDUCE_PRINT	la.tab.c	935;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	lex.yy.c	529;"	d	file:
YY_RULE_SETUP	lex.yy.c	712;"	d	file:
YY_SC_TO_UI	lex.yy.c	119;"	d	file:
YY_STACK_PRINT	la.tab.c	884;"	d	file:
YY_STACK_PRINT	la.tab.c	934;"	d	file:
YY_START	lex.yy.c	131;"	d	file:
YY_START_STACK_INCR	lex.yy.c	679;"	d	file:
YY_STATE_BUF_SIZE	lex.yy.c	157;"	d	file:
YY_STATE_EOF	lex.yy.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	lex.yy.c	209;"	d	file:
YY_SYMBOL_PRINT	la.tab.c	789;"	d	file:
YY_SYMBOL_PRINT	la.tab.c	933;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	lex.yy.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	lex.yy.c	204;"	d	file:
YY_USER_ACTION	lex.yy.c	704;"	d	file:
YY_USE_CONST	lex.yy.c	100;"	d	file:
YY_USE_CONST	lex.yy.c	93;"	d	file:
_INTERCODE_H	intercode.h	2;"	d
_NODE_H	node.h	2;"	d
_OBJECT_H	object.h	2;"	d
_TABLE_H	table.h	2;"	d
__STDC_LIMIT_MACROS	lex.yy.c	39;"	d	file:
_prompt	out.s	/^_prompt: .asciiz "Enter an integer:"$/;"	l
_reg_t	object.h	/^typedef struct _reg_t$/;"	s
_ret	out.s	/^_ret: .asciiz "\\n"$/;"	l
_var_t	object.h	/^typedef struct _var_t$/;"	s
add	out.s	/^add $t1, $t1, $t0$/;"	l
add	out.s	/^add $t6, $t1, $t5$/;"	l
add	out.s	/^add $t8, $t9, $t7$/;"	l
addChild	node.c	/^void addChild(Node* f,Node* c)$/;"	f
add_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
add_var	object.c	/^void add_var(var_t*v)$/;"	f
addi	out.s	/^addi $fp, $sp, 8$/;"	l
addi	out.s	/^addi $sp, $sp, 0$/;"	l
addi	out.s	/^addi $sp, $sp, 4$/;"	l
addi	out.s	/^addi $t0, $t0, -1$/;"	l
addi	out.s	/^addi $t0, $t0, 1$/;"	l
addi	out.s	/^addi $t1, $t1, -1$/;"	l
addi	out.s	/^addi $t1, $t1, 1$/;"	l
addi	out.s	/^addi $t4, $t4, 1$/;"	l
allocReg	object.c	/^int allocReg(Operand op,FILE *fp)$/;"	f
alloca	la.tab.c	266;"	d	file:
argCount	object.c	/^int argCount;$/;"	v
arg_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
array	table.h	/^		struct { Type elem; int size; } array;$/;"	m	union:Type_::__anon3	typeref:struct:Type_::__anon3::__anon4
array	table.h	/^	enum { basic, array, structure,constant} kind;$/;"	e	enum:Type_::__anon2
assCode	object.c	/^Operand assCode(Operand con,FILE* fp)$/;"	f
assign	intercode.h	/^		}assign;	\/\/assign	rightat$/;"	m	union:InterCode_::__anon8	typeref:struct:InterCode_::__anon8::__anon10
assign_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
basic	table.h	/^		int basic;$/;"	m	union:Type_::__anon3
basic	table.h	/^	enum { basic, array, structure,constant} kind;$/;"	e	enum:Type_::__anon2
bge	out.s	/^bge $t0, $t1, label16	$/;"	l
bge	out.s	/^bge $t0, $t2, label5	$/;"	l
bge	out.s	/^bge $t1, $t2, label26	$/;"	l
bge	out.s	/^bge $t2, $t3, label20	$/;"	l
binop	intercode.h	/^		}binop;			\/\/add sub mul div $/;"	m	union:InterCode_::__anon8	typeref:struct:InterCode_::__anon8::__anon11
ble	out.s	/^ble $t0, $t4, label8	$/;"	l
ble	out.s	/^ble $t1, $t3, label3	$/;"	l
ble	out.s	/^ble $t2, $t4, label11	$/;"	l
blt	out.s	/^blt $t4, $t5, label23	$/;"	l
bne	out.s	/^bne $t0, $t1, label28	$/;"	l
bne	out.s	/^bne $t1, $t2, label13	$/;"	l
bool	table.h	/^typedef enum {false, true}bool;$/;"	t	typeref:enum:__anon1
call_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
checkFunc	table.c	/^void checkFunc()$/;"	f
children	node.h	/^	struct Node_t *children; $/;"	m	struct:Node_t	typeref:struct:Node_t::Node_t
code_h	intercode.c	/^InterCode code_h=NULL;$/;"	v
code_t	intercode.c	/^InterCode code_t=NULL;$/;"	v
cons	intercode.h	/^		tempvar,variable,cons,vaddress,label,$/;"	e	enum:Operand_::__anon5
constant	table.h	/^	enum { basic, array, structure,constant} kind;$/;"	e	enum:Type_::__anon2
crossProduct	case/E-2.c	/^int crossProduct(struct Vector v11, struct Vector v21)$/;"	f
dec	intercode.h	/^		}dec; \/\/dec$/;"	m	union:InterCode_::__anon8	typeref:struct:InterCode_::__anon8::__anon13
dec_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
del_var	object.c	/^void del_var()$/;"	f
deleteCode	intercode.c	/^void deleteCode(InterCode c)$/;"	f
div	out.s	/^div $t0, $t5$/;"	l
div	out.s	/^div $t1, $t3$/;"	l
div	out.s	/^div $t2, $t0, $t1$/;"	l
div	out.s	/^div $t3, $t2$/;"	l
div_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
elem	table.h	/^		struct { Type elem; int size; } array;$/;"	m	struct:Type_::__anon3::__anon4
errorFlag	lex.yy.c	/^	int errorFlag=1;$/;"	v
fact	4_2.c	/^int fact(int n)$/;"	f
false	table.h	/^typedef enum {false, true}bool;$/;"	e	enum:__anon1
fib	case/B-4.c	/^int fib(int n) {$/;"	f
findFunc	table.c	/^Functype findFunc(char *name)$/;"	f
findReg	object.c	/^int findReg(FILE*fp)$/;"	f
findSymbol	table.c	/^FieldList findSymbol(char *name){	$/;"	f
flex_int16_t	lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
freeReg	object.c	/^void freeReg(int index)$/;"	f
funList	object.c	/^var_t *funList;$/;"	v
func	4_3.c	/^int func(int a1,int a2,int a3,int a4,int a5)$/;"	f
funcTable	table.c	/^FieldList hashTable[TABLESIZE]; Functype funcTable[TABLESIZE]; \/*hash size=2^14*\/ $/;"	v
function	intercode.h	/^		function,taddress$/;"	e	enum:Operand_::__anon5
function_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
getNumDigits	case/C-1.c	/^int getNumDigits(int number3)$/;"	f
getNumDigits	out.s	/^getNumDigits	:$/;"	l
getReg	object.c	/^void getReg(int index,FILE*fp)$/;"	f
goto_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
hashTable	table.c	/^FieldList hashTable[TABLESIZE]; Functype funcTable[TABLESIZE]; \/*hash size=2^14*\/ $/;"	v
hash_pjw	table.c	/^unsigned int hash_pjw(char* name)$/;"	f
ifgoto_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
inList	table.h	/^	FieldList inList;$/;"	m	struct:Structure_
inc	case/A-5.c	/^int inc(int x)$/;"	f
initNode	node.c	/^Node* initNode(char *name,char *value)$/;"	f
initReg	object.c	/^void initReg()$/;"	f
initTable	table.c	/^void initTable() $/;"	f
insertCode	intercode.c	/^void insertCode(InterCode c)$/;"	f
insertFunc	table.c	/^int insertFunc(Functype f,int type)		\/\/0:declare 1:define$/;"	f
insertParam	table.c	/^void insertParam(Functype f)$/;"	f
insertTable	table.c	/^int insertTable(FieldList f)$/;"	f
isDefined	table.h	/^	bool isDefined;$/;"	m	struct:Functype_
isNarcissistic	case/C-1.c	/^int isNarcissistic(int number4)$/;"	f
isNarcissistic	out.s	/^isNarcissistic	:$/;"	l
j	out.s	/^j label1	$/;"	l
j	out.s	/^j label14	$/;"	l
j	out.s	/^j label17	$/;"	l
j	out.s	/^j label18	$/;"	l
j	out.s	/^j label21	$/;"	l
j	out.s	/^j label24	$/;"	l
j	out.s	/^j label6	$/;"	l
j	out.s	/^j label9	$/;"	l
jal	out.s	/^jal getNumDigits	$/;"	l
jal	out.s	/^jal isNarcissistic	$/;"	l
jal	out.s	/^jal mod	$/;"	l
jal	out.s	/^jal power	$/;"	l
jal	out.s	/^jal printHex	$/;"	l
jal	out.s	/^jal printHexDigit	$/;"	l
jal	out.s	/^jal write$/;"	l
jr	out.s	/^jr $ra$/;"	l
kind	intercode.h	/^	}kind;$/;"	m	struct:InterCode_	typeref:enum:InterCode_::__anon7
kind	intercode.h	/^	}kind;$/;"	m	struct:Operand_	typeref:enum:Operand_::__anon5
kind	table.h	/^	enum { basic, array, structure,constant} kind;$/;"	m	struct:Type_	typeref:enum:Type_::__anon2
la	out.s	/^la $a0, _prompt$/;"	l
la	out.s	/^la $a0, _ret$/;"	l
labCount	intercode.c	/^int labCount=1;$/;"	v
label	intercode.h	/^			Operand t2,label;$/;"	m	struct:InterCode_::__anon8::__anon12
label	intercode.h	/^		tempvar,variable,cons,vaddress,label,$/;"	e	enum:Operand_::__anon5
label1	out.s	/^label1	:$/;"	l
label11	out.s	/^label11	:$/;"	l
label13	out.s	/^label13	:$/;"	l
label14	out.s	/^label14	:$/;"	l
label16	out.s	/^label16	:$/;"	l
label17	out.s	/^label17	:$/;"	l
label18	out.s	/^label18	:$/;"	l
label20	out.s	/^label20	:$/;"	l
label21	out.s	/^label21	:$/;"	l
label23	out.s	/^label23	:$/;"	l
label24	out.s	/^label24	:$/;"	l
label26	out.s	/^label26	:$/;"	l
label28	out.s	/^label28	:$/;"	l
label3	out.s	/^label3	:$/;"	l
label5	out.s	/^label5	:$/;"	l
label6	out.s	/^label6	:$/;"	l
label8	out.s	/^label8	:$/;"	l
label9	out.s	/^label9	:$/;"	l
label_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
left	intercode.h	/^			Operand left,right;	\/\/call $/;"	m	struct:InterCode_::__anon8::__anon10
li	out.s	/^li $t0 0$/;"	l
li	out.s	/^li $t1 0$/;"	l
li	out.s	/^li $t1 1$/;"	l
li	out.s	/^li $t1 10$/;"	l
li	out.s	/^li $t1 9474$/;"	l
li	out.s	/^li $t2 0$/;"	l
li	out.s	/^li $t2 1$/;"	l
li	out.s	/^li $t2 16$/;"	l
li	out.s	/^li $t2 9475$/;"	l
li	out.s	/^li $t3 -1$/;"	l
li	out.s	/^li $t3 0$/;"	l
li	out.s	/^li $t3 1$/;"	l
li	out.s	/^li $t3 10$/;"	l
li	out.s	/^li $t3 4$/;"	l
li	out.s	/^li $t4 0$/;"	l
li	out.s	/^li $t4 3$/;"	l
li	out.s	/^li $t4 4$/;"	l
li	out.s	/^li $t5 0$/;"	l
li	out.s	/^li $t5 10$/;"	l
li	out.s	/^li $t6 4$/;"	l
li	out.s	/^li $t7 16$/;"	l
li	out.s	/^li $v0, 1$/;"	l
li	out.s	/^li $v0, 4$/;"	l
li	out.s	/^li $v0, 5$/;"	l
lookCon	intercode.c	/^void lookCon()$/;"	f
lw	out.s	/^lw $fp, 0($sp)$/;"	l
lw	out.s	/^lw $ra, 0($sp)$/;"	l
lw	out.s	/^lw $s0,0($t8)$/;"	l
lw	out.s	/^lw $t0, 0($t1)$/;"	l
lw	out.s	/^lw $t1, 0($t2)$/;"	l
lw	out.s	/^lw $t2, 0($t3)$/;"	l
lw	out.s	/^lw $t3, 0($t4)$/;"	l
lw	out.s	/^lw $t4, 0($t5)$/;"	l
lw	out.s	/^lw $t9, 0($s0)$/;"	l
main	4_1.c	/^int main()$/;"	f
main	4_2.c	/^int main()$/;"	f
main	4_3.c	/^int main()$/;"	f
main	case/A-1.c	/^int main()$/;"	f
main	case/A-2.c	/^int main()$/;"	f
main	case/A-3.c	/^int main()$/;"	f
main	case/A-4.c	/^int main()$/;"	f
main	case/A-5.c	/^int main()$/;"	f
main	case/B-1.c	/^int main()$/;"	f
main	case/B-2.c	/^int main()$/;"	f
main	case/B-3.c	/^int main()$/;"	f
main	case/B-4.c	/^int main() {$/;"	f
main	case/C-1.c	/^int main() {$/;"	f
main	case/D-1.c	/^int main()$/;"	f
main	case/E-1.c	/^int main()$/;"	f
main	case/E-2.c	/^int main()$/;"	f
main	case/E-3.c	/^int main()$/;"	f
main	case/E-4.c	/^int main()$/;"	f
main	la.tab.c	/^int main(int argc, char** argv)$/;"	f
main	out.s	/^main	:$/;"	l
mflo	out.s	/^mflo $t0$/;"	l
mflo	out.s	/^mflo $t2$/;"	l
mflo	out.s	/^mflo $t3$/;"	l
min	case/E-4.c	/^int min(int a[10], int n)$/;"	f
mod	case/C-1.c	/^int mod(int number2, int m2)$/;"	f
mod	out.s	/^mod	:$/;"	l
move	out.s	/^move $a0, $s0$/;"	l
move	out.s	/^move $a0, $t0$/;"	l
move	out.s	/^move $a0, $t1$/;"	l
move	out.s	/^move $a0, $t2$/;"	l
move	out.s	/^move $a0, $t3$/;"	l
move	out.s	/^move $a1, $t4$/;"	l
move	out.s	/^move $a1, $t5$/;"	l
move	out.s	/^move $a1, $t7$/;"	l
move	out.s	/^move $t0, $a0$/;"	l
move	out.s	/^move $t0, $v0$/;"	l
move	out.s	/^move $t1, $a1$/;"	l
move	out.s	/^move $t1, $sp$/;"	l
move	out.s	/^move $t2 ,$t3$/;"	l
move	out.s	/^move $v0, $0$/;"	l
move	out.s	/^move $v0,$t0$/;"	l
move	out.s	/^move $v0,$t1$/;"	l
move	out.s	/^move $v0,$t2$/;"	l
move	out.s	/^move $v0,$t3$/;"	l
move	out.s	/^move $v0,$t4$/;"	l
mul	out.s	/^mul $t2, $t2, $t0$/;"	l
mul	out.s	/^mul $t3, $t2, $t1$/;"	l
mul	out.s	/^mul $t5, $t2, $t4$/;"	l
mul	out.s	/^mul $t7, $t4, $t6$/;"	l
mul_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
name	intercode.h	/^		Operand name;   \/\/vaddress,taddress$/;"	m	union:Operand_::__anon6
name	node.h	/^	char name[32];$/;"	m	struct:Node_t
name	object.h	/^	char *name;$/;"	m	struct:_var_t
name	object.h	/^	char name[2];$/;"	m	struct:_reg_t
name	table.h	/^	char *name;$/;"	m	struct:Structure_
name	table.h	/^	char* name;	\/\/ 域的名字$/;"	m	struct:FieldList_
name	table.h	/^	char*name;$/;"	m	struct:Functype_
next	intercode.h	/^	InterCode pre,next;$/;"	m	struct:InterCode_
next	intercode.h	/^	Label_No next;$/;"	m	struct:Label_No_
next	intercode.h	/^	Operand next;		\/\/arg use it$/;"	m	struct:Operand_
next	node.h	/^	struct Node_t *next; $/;"	m	struct:Node_t	typeref:struct:Node_t::Node_t
next	object.h	/^	struct _var_t* next;$/;"	m	struct:_var_t	typeref:struct:_var_t::_var_t
no	intercode.h	/^	int no;$/;"	m	struct:Label_No_
node	la.tab.c	/^	Node* node;$/;"	m	union:YYSTYPE	file:
node	la.tab.h	/^	Node* node;$/;"	m	union:YYSTYPE
offset	object.c	/^int offset;$/;"	v
offset	object.h	/^	int offset;$/;"	m	struct:_var_t
old	object.h	/^	int old;$/;"	m	struct:_reg_t
one	intercode.h	/^		}one;$/;"	m	union:InterCode_::__anon8	typeref:struct:InterCode_::__anon8::__anon9
op	intercode.h	/^			Operand op;		\/\/param$/;"	m	struct:InterCode_::__anon8::__anon9
op	intercode.h	/^			Operand op;$/;"	m	struct:InterCode_::__anon8::__anon13
op	intercode.h	/^			char *op;$/;"	m	struct:InterCode_::__anon8::__anon12
op1	intercode.h	/^			Operand result,op1,op2;	$/;"	m	struct:InterCode_::__anon8::__anon11
op2	intercode.h	/^			Operand result,op1,op2;	$/;"	m	struct:InterCode_::__anon8::__anon11
opEqual	intercode.c	/^int opEqual(Operand op1,Operand op2)$/;"	f
optIF	intercode.c	/^void optIF()$/;"	f
param	table.h	/^	FieldList param;$/;"	m	struct:Functype_
paramEqual	table.c	/^bool paramEqual(FieldList f1,FieldList f2)$/;"	f
param_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
power	case/C-1.c	/^int power(int base1, int p1) {$/;"	f
power	out.s	/^power	:$/;"	l
pre	intercode.h	/^	InterCode pre,next;$/;"	m	struct:InterCode_
printAllCode	object.c	/^void printAllCode(char* fname)$/;"	f
printCode	intercode.c	/^void printCode(char* fname)$/;"	f
printHex	case/C-1.c	/^int printHex(int number5)$/;"	f
printHex	out.s	/^printHex	:$/;"	l
printHexDigit	case/C-1.c	/^int printHexDigit(int digit6)$/;"	f
printHexDigit	out.s	/^printHexDigit	:$/;"	l
printNode	table.c	/^void printNode(Node *n)$/;"	f
printObjCode	object.c	/^void printObjCode(InterCode c,FILE* fp)$/;"	f
printOp	intercode.c	/^void printOp(Operand op,FILE* fp)$/;"	f
printTree	node.c	/^void printTree(Node* r,int count)$/;"	f
printargs	table.c	/^void printargs(Node *n)$/;"	f
printparam	table.c	/^void printparam(FieldList f)$/;"	f
printtype	table.c	/^void printtype(Type t){$/;"	f
rddCode	intercode.c	/^void rddCode()$/;"	f
read	out.s	/^read:$/;"	l
read_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
reg	object.c	/^reg_t reg[REGNUM];$/;"	v
reg	object.h	/^	int reg;$/;"	m	struct:_var_t
reg_t	object.h	/^}reg_t;$/;"	t	typeref:struct:_reg_t
resetST	object.c	/^void resetST()$/;"	f
result	intercode.h	/^			Operand result,op1,op2;	$/;"	m	struct:InterCode_::__anon8::__anon11
return_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
retype	table.h	/^	Type retype;$/;"	m	struct:Functype_
right	intercode.h	/^			Operand left,right;	\/\/call $/;"	m	struct:InterCode_::__anon8::__anon10
rightat_k	intercode.h	/^		rightat_k$/;"	e	enum:InterCode_::__anon7
rmLabel	intercode.c	/^void rmLabel()$/;"	f
root	la.tab.c	/^	Node* root;$/;"	v
row	node.h	/^	int row; $/;"	m	struct:Node_t
row	table.h	/^	int row;$/;"	m	struct:Functype_
sameHash	table.h	/^	FieldList sameHash;$/;"	m	struct:FieldList_
sameHash	table.h	/^	Functype sameHash;$/;"	m	struct:Functype_
sameRight	intercode.c	/^void sameRight()$/;"	f
short	la.tab.c	169;"	d	file:
size	intercode.h	/^			int size;$/;"	m	struct:InterCode_::__anon8::__anon13
size	table.h	/^		struct { Type elem; int size; } array;$/;"	m	struct:Type_::__anon3::__anon4
std	Makefile	/^	gcc -Wall -pedantic -std=c99 -g la.tab.c table.c node.c intercode.c object.c -lfl -o parser$/;"	m
structure	table.h	/^		Structure structure;$/;"	m	union:Type_::__anon3
structure	table.h	/^	enum { basic, array, structure,constant} kind;$/;"	e	enum:Type_::__anon2
sub	out.s	/^sub $t1, $t2, $t0$/;"	l
sub	out.s	/^sub $t3, $t2, $t0$/;"	l
sub	out.s	/^sub $t4, $t0, $t3$/;"	l
sub_k	intercode.h	/^		assign_k,add_k,sub_k,mul_k,div_k,return_k,label_k,goto_k,$/;"	e	enum:InterCode_::__anon7
subu	out.s	/^subu  $s0,$fp , 32$/;"	l
subu	out.s	/^subu  $t1,$fp , 12$/;"	l
subu	out.s	/^subu  $t1,$fp , 64$/;"	l
subu	out.s	/^subu  $t2,$fp , 24$/;"	l
subu	out.s	/^subu  $t2,$fp , 52$/;"	l
subu	out.s	/^subu  $t3,$fp , 16$/;"	l
subu	out.s	/^subu  $t3,$fp , 28$/;"	l
subu	out.s	/^subu  $t4,$fp , 12$/;"	l
subu	out.s	/^subu  $t4,$fp , 28$/;"	l
subu	out.s	/^subu  $t5,$fp , 20$/;"	l
subu	out.s	/^subu  $t5,$fp , 36$/;"	l
subu	out.s	/^subu $sp, $fp, 8$/;"	l
subu	out.s	/^subu $sp, $sp, 16$/;"	l
subu	out.s	/^subu $sp, $sp, 4$/;"	l
sw	out.s	/^sw $fp, 0($sp)$/;"	l
sw	out.s	/^sw $ra, 0($sp)$/;"	l
sw	out.s	/^sw $t0, 0($sp)$/;"	l
sw	out.s	/^sw $t0,0($t1)$/;"	l
sw	out.s	/^sw $t1, 0($sp)$/;"	l
sw	out.s	/^sw $t2, 0($sp)$/;"	l
sw	out.s	/^sw $t3, 0($sp)$/;"	l
sw	out.s	/^sw $t4, 0($sp)$/;"	l
sw	out.s	/^sw $t5, 0($sp)$/;"	l
sw	out.s	/^sw $t6, 0($sp)$/;"	l
sw	out.s	/^sw $t7, 0($sp)$/;"	l
sw	out.s	/^sw $t8, 0($sp)$/;"	l
sw	out.s	/^sw $t9, 0($sp)$/;"	l
syscall	out.s	/^syscall$/;"	l
t1	intercode.h	/^			Operand t1;$/;"	m	struct:InterCode_::__anon8::__anon12
t2	intercode.h	/^			Operand t2,label;$/;"	m	struct:InterCode_::__anon8::__anon12
taddress	intercode.h	/^		function,taddress$/;"	e	enum:Operand_::__anon5
tail	table.h	/^	FieldList tail;	\/\/ 下一个域$/;"	m	struct:FieldList_
tempvar	intercode.h	/^		tempvar,variable,cons,vaddress,label,$/;"	e	enum:Operand_::__anon5
triop	intercode.h	/^		}triop;			\/\/if_goto$/;"	m	union:InterCode_::__anon8	typeref:struct:InterCode_::__anon8::__anon12
true	table.h	/^typedef enum {false, true}bool;$/;"	e	enum:__anon1
type	table.h	/^	Type type;	\/\/ 域的类型$/;"	m	struct:FieldList_
typeEqual	table.c	/^bool typeEqual(Type t1,Type t2)$/;"	f
typeSize	table.c	/^int typeSize(Type type)$/;"	f
type_float	la.tab.c	/^	float type_float;               \/* Constant floating point value *\/$/;"	m	union:YYSTYPE	file:
type_float	la.tab.h	/^	float type_float;               \/* Constant floating point value *\/$/;"	m	union:YYSTYPE
type_int	la.tab.c	/^	int type_int;              \/* Constant integer value *\/$/;"	m	union:YYSTYPE	file:
type_int	la.tab.h	/^	int type_int;              \/* Constant integer value *\/$/;"	m	union:YYSTYPE
type_str	la.tab.c	/^	char *type_str;              \/* Ptr to constant string (strings are malloc'd) *\/$/;"	m	union:YYSTYPE	file:
type_str	la.tab.h	/^	char *type_str;              \/* Ptr to constant string (strings are malloc'd) *\/$/;"	m	union:YYSTYPE
u	intercode.h	/^	}u;$/;"	m	struct:InterCode_	typeref:union:InterCode_::__anon8
u	intercode.h	/^	}u;$/;"	m	struct:Operand_	typeref:union:Operand_::__anon6
u	table.h	/^	} u;$/;"	m	struct:Type_	typeref:union:Type_::__anon3
unput	lex.yy.c	201;"	d	file:
vaddress	intercode.h	/^		tempvar,variable,cons,vaddress,label,$/;"	e	enum:Operand_::__anon5
value	intercode.h	/^		char* value;	\/\/constant$/;"	m	union:Operand_::__anon6
value	node.h	/^	char value[32]; $/;"	m	struct:Node_t
var	object.h	/^	char *var;$/;"	m	struct:_reg_t
varCount	intercode.c	/^int varCount=1;$/;"	v
var_no	intercode.h	/^		int var_no;		\/\/tempvar,label,$/;"	m	union:Operand_::__anon6
var_t	object.h	/^}var_t;$/;"	t	typeref:struct:_var_t
variable	intercode.h	/^		tempvar,variable,cons,vaddress,label,$/;"	e	enum:Operand_::__anon5
write	out.s	/^write:$/;"	l
write_k	intercode.h	/^		ifgoto_k,read_k,write_k,call_k,arg_k,function_k,param_k,dec_k,$/;"	e	enum:InterCode_::__anon7
x	case/E-1.c	/^int x, y;$/;"	m	struct:Vector	file:
x	case/E-2.c	/^int x, y;$/;"	m	struct:Vector	file:
y	case/E-1.c	/^int x, y;$/;"	m	struct:Vector	file:
y	case/E-2.c	/^int x, y;$/;"	m	struct:Vector	file:
yy_accept	lex.yy.c	/^static yyconst flex_int16_t yy_accept[77] =$/;"	v	file:
yy_at_bol	lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	lex.yy.c	/^static yyconst flex_int16_t yy_base[78] =$/;"	v	file:
yy_bs_column	lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	lex.yy.c	/^static yyconst flex_int16_t yy_chk[158] =$/;"	v	file:
yy_create_buffer	lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	lex.yy.c	/^static yyconst flex_int16_t yy_def[78] =$/;"	v	file:
yy_delete_buffer	lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	lex.yy.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	lex.yy.c	/^static yyconst flex_int32_t yy_meta[41] =$/;"	v	file:
yy_n_chars	lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	lex.yy.c	330;"	d	file:
yy_nxt	lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	lex.yy.c	/^static yyconst flex_int16_t yy_nxt[158] =$/;"	v	file:
yy_reduce_print	la.tab.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_rule_can_match_eol	lex.yy.c	/^static yyconst flex_int32_t yy_rule_can_match_eol[37] =$/;"	v	file:
yy_scan_buffer	lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	lex.yy.c	342;"	d	file:
yy_set_interactive	lex.yy.c	332;"	d	file:
yy_size_t	lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	la.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	la.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	la.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	la.tab.c	/^union yyalloc$/;"	u	file:
yyalloc	lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yychar	la.tab.c	/^int yychar;$/;"	v
yycheck	la.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	la.tab.c	687;"	d	file:
yyconst	lex.yy.c	106;"	d	file:
yyconst	lex.yy.c	108;"	d	file:
yydebug	la.tab.c	/^int yydebug;$/;"	v
yydefact	la.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	la.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	la.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	la.tab.c	686;"	d	file:
yyerror	la.tab.c	/^int yyerror(char* msg)$/;"	f
yyfree	lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	lex.yy.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	lex.yy.c	/^int yyleng;$/;"	v
yyless	lex.yy.c	1813;"	d	file:
yyless	lex.yy.c	1814;"	d	file:
yyless	lex.yy.c	188;"	d	file:
yylex_destroy	lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	lex.yy.c	/^int yylineno = 1;$/;"	v
yylval	la.tab.c	/^YYSTYPE yylval;$/;"	v
yymore	lex.yy.c	527;"	d	file:
yynerrs	la.tab.c	/^int yynerrs;$/;"	v
yyout	lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	la.tab.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	la.tab.c	632;"	d	file:
yyparse	la.tab.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	la.tab.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	la.tab.c	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	la.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	la.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	la.tab.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	la.tab.c	/^static const yytype_uint8 yyrline[] =$/;"	v	file:
yyset_debug	lex.yy.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	lex.yy.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	lex.yy.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	lex.yy.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	la.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	la.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	la.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	la.tab.c	983;"	d	file:
yystrlen	la.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	la.tab.c	960;"	d	file:
yystype	la.tab.c	157;"	d	file:
yystype	la.tab.h	91;"	d
yysyntax_error	la.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	la.tab.c	/^static const yytype_int8 yytable[] =$/;"	v	file:
yytable_value_is_error	la.tab.c	635;"	d	file:
yyterminate	lex.yy.c	674;"	d	file:
yytext	lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	lex.yy.c	367;"	d	file:
yytname	la.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	la.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	la.tab.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	la.tab.h	/^   enum yytokentype {$/;"	g
yytoknum	la.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	la.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	la.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	la.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	la.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	la.tab.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	la.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	la.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	la.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	la.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	la.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	lex.yy.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	la.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	lex.yy.c	/^int yywrap(){$/;"	f
